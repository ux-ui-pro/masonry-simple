{"mappings":"AAAA,MAAM;IACJ,YAAY,KAAK;IACjB,YAAY,EAAE,CAAC;IACf,YAAY,EAAE;IACd,SAAS,EAAE;IACX,gBAAgB,KAAK;IACrB,iBAAiB,IAAI,eAAe,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,GAAG;IAElE,YAAY,UAAU,CAAC,CAAC,CAAE;QACxB,IAAI,CAAC,SAAS,GACZ,QAAQ,SAAS,YAAY,cACzB,QAAQ,SAAS,GACjB,SAAS,aAAa,CAAC,QAAQ,SAAS,IAAI;IACpD;IAEA,eAAe;QACb,IAAI,IAAI,CAAC,aAAa,EACpB,OAAO,oBAAoB,CAAC,IAAI,CAAC,aAAa;QAGhD,IAAI,CAAC,aAAa,GAAG,OAAO,qBAAqB,CAAC;YAChD,IAAI,CAAC,cAAc;QACrB;IACF;IAEA,iBAAiB;QACf,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,UAAU,GAAG;QAClC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;YACtB,MAAM,UAAU,KAAK,IAAI,CACvB,AAAC,CAAA,KAAK,YAAY,GAAG,IAAI,CAAC,MAAM,AAAD,IAAM,CAAA,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,MAAM,AAAD;YAGlE,KAAK,KAAK,CAAC,UAAU,GAAG,CAAC,KAAK,EAAE,QAAQ,CAAC;QAC3C;IACF;IAEA,OAAO;QACL,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;QAErB,MAAM,UAAE,MAAM,EAAE,GAAG,iBAAiB,IAAI,CAAC,SAAS;QAElD,IAAI,CAAC,SAAS,GAAG,MAAM,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ;QACnD,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,OAAO,GAAG;QAC/B,IAAI,CAAC,MAAM,GAAG,SAAS,QAAQ;QAC/B,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS;QAC1C,IAAI,CAAC,cAAc;IACrB;IAEA,UAAU;QACR,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS;QAC5C,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,OAAO,GAAG;QAC/B,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,UAAU,GAAG;QAClC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;YACtB,KAAK,KAAK,CAAC,UAAU,GAAG;QAC1B;IACF;AACF;IAEA,2CAAe","sources":["src/index.js"],"sourcesContent":["class MasonrySimple {\n  container = null;\n  gridItems = [];\n  rowHeight = 1;\n  rowGap = 0;\n  resizeTimeout = null;\n  resizeObserver = new ResizeObserver(this.handleResize.bind(this));\n\n  constructor(options = {}) {\n    this.container =\n      options.container instanceof HTMLElement\n        ? options.container\n        : document.querySelector(options.container || '.masonry');\n  }\n\n  handleResize() {\n    if (this.resizeTimeout) {\n      window.cancelAnimationFrame(this.resizeTimeout);\n    }\n\n    this.resizeTimeout = window.requestAnimationFrame(() => {\n      this.resizeAllItems();\n    });\n  }\n\n  resizeAllItems() {\n    this.container.style.alignItems = 'start';\n    this.gridItems.forEach((item) => {\n      const rowSpan = Math.ceil(\n        (item.clientHeight + this.rowGap) / (this.rowHeight + this.rowGap)\n      );\n\n      item.style.gridRowEnd = `span ${rowSpan}`;\n    });\n  }\n\n  init() {\n    if (!this.container) return;\n\n    const { rowGap } = getComputedStyle(this.container);\n\n    this.gridItems = Array.from(this.container.children);\n    this.container.style.contain = 'layout';\n    this.rowGap = parseInt(rowGap, 10);\n    this.resizeObserver.observe(this.container);\n    this.resizeAllItems();\n  }\n\n  destroy() {\n    this.resizeObserver.unobserve(this.container);\n    this.container.style.contain = '';\n    this.container.style.alignItems = '';\n    this.gridItems.forEach((item) => {\n      item.style.gridRowEnd = '';\n    });\n  }\n}\n\nexport default MasonrySimple;\n"],"names":[],"version":3,"file":"index.module.js.map"}