{"mappings":";;;;;;;;;;AAAA,MAAM;IACJ,aAAc;QACZ,IAAI,CAAC,OAAO;QACZ,IAAI,CAAC,YAAY,EAAE;QACnB,IAAI,CAAC,iBAAiB;QACtB,IAAI,CAAC,YAAY;QACjB,IAAI,CAAC,0BAA0B;QAC/B,IAAI,CAAC,gBAAgB;IACvB;IAEA,WAAW,IAAI,EAAE;QACf,MAAM,UAAU,KAAK,KACnB,AAAC,CAAA,KAAK,eAAe,IAAI,CAAC,MAAK,IAAM,CAAA,IAAI,CAAC,YAAY,IAAI,CAAC,MAAK;QAGlE,MAAM,UAAU;QAEhB,QAAQ,MAAM,aAAa,CAAC,KAAK,EAAE,QAAQ,CAAC;IAC9C;IAEA,iBAAiB;QACf,IAAI,IAAI,CAAC,eAAe;QAExB,IAAI,CAAC,gBAAgB;QAErB,IAAI,CAAC,IAAI,CAAC,yBACR,IAAI,CAAC,0BAA0B,sBAAsB;YACnD,IAAI,CAAC,KAAK,MAAM,aAAa;YAC7B,IAAI,CAAC,UAAU,QAAQ,CAAC,OAAS,IAAI,CAAC,WAAW;YACjD,IAAI,CAAC,gBAAgB;YACrB,IAAI,CAAC,0BAA0B;QACjC;IAEJ;IAEA,OAAO,KAAK,UAAU,CAAC,CAAC,EAAE;QACxB,MAAM,aAAE,YAAY,YAAY,GAAG;QACnC,MAAM,UAAU,IAAI;QAEpB,QAAQ,OAAO,qBAAqB,cAAc,YAAY,SAAS,cAAc;QAErF,IAAI,CAAC,QAAQ,MAAM;QAEnB,QAAQ,YAAY,QAAQ,KAAK,SAAS,SACtC,MAAM,KAAK,QAAQ,KAAK,YACxB,EAAE;QACN,QAAQ,KAAK,MAAM,UAAU;QAE7B,QAAQ,SAAS,SACf,OAAO,iBAAiB,QAAQ,MAAM,iBAAiB,iBACvD;QAGF,QAAQ,iBAAiB,IAAI,eAC3B,QAAQ,eAAe,KAAK;QAG9B,QAAQ,eAAe,QAAQ,QAAQ;QACvC,QAAQ;IACV;IAEA,UAAU;QACR,IAAI,IAAI,CAAC,gBAAgB;YACvB,IAAI,CAAC,eAAe,UAAU,IAAI,CAAC;YACnC,IAAI,CAAC,iBAAiB;QACxB;QAEA,IAAI,CAAC,KAAK,MAAM,UAAU;QAC1B,IAAI,CAAC,KAAK,MAAM,aAAa;QAC7B,IAAI,CAAC,UAAU,QAAQ,CAAC;YACtB,MAAM,UAAU;YAChB,QAAQ,MAAM,aAAa;QAC7B;IACF;AACF;IAEA,2CAAe","sources":["src/index.js"],"sourcesContent":["class MasonrySimple {\n  constructor() {\n    this.grid = null;\n    this.gridItems = [];\n    this.resizeObserver = null;\n    this.rowHeight = 1;\n    this.requestAnimationFrameId = null;\n    this.pendingResize = false;\n  }\n\n  resizeItem(item) {\n    const rowSpan = Math.ceil(\n      (item.clientHeight + this.rowGap) / (this.rowHeight + this.rowGap),\n    );\n\n    const newItem = item;\n\n    newItem.style.gridRowEnd = `span ${rowSpan}`;\n  }\n\n  resizeAllItems() {\n    if (this.pendingResize) return;\n\n    this.pendingResize = true;\n\n    if (!this.requestAnimationFrameId) {\n      this.requestAnimationFrameId = requestAnimationFrame(() => {\n        this.grid.style.alignItems = 'start';\n        this.gridItems.forEach((item) => this.resizeItem(item));\n        this.pendingResize = false;\n        this.requestAnimationFrameId = null;\n      });\n    }\n  }\n\n  static init(options = {}) {\n    const { container = '.masonry' } = options;\n    const masonry = new MasonrySimple();\n\n    masonry.grid = container instanceof HTMLElement ? container : document.querySelector(container);\n\n    if (!masonry.grid) return;\n\n    masonry.gridItems = masonry.grid.children.length\n      ? Array.from(masonry.grid.children)\n      : [];\n    masonry.grid.style.contain = 'layout';\n\n    masonry.rowGap = parseInt(\n      window.getComputedStyle(masonry.grid).getPropertyValue('grid-row-gap'),\n      10,\n    );\n\n    masonry.resizeObserver = new ResizeObserver(\n      masonry.resizeAllItems.bind(masonry),\n    );\n\n    masonry.resizeObserver.observe(masonry.grid);\n    masonry.resizeAllItems();\n  }\n\n  destroy() {\n    if (this.resizeObserver) {\n      this.resizeObserver.unobserve(this.grid);\n      this.resizeObserver = null;\n    }\n\n    this.grid.style.contain = '';\n    this.grid.style.alignItems = '';\n    this.gridItems.forEach((item) => {\n      const newItem = item;\n      newItem.style.gridRowEnd = '';\n    });\n  }\n}\n\nexport default MasonrySimple;\n"],"names":[],"version":3,"file":"index.js.map"}