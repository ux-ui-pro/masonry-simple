{"mappings":";;;;;;;;;;;;AAAA,MAAM;IACJ,aAAc;QACZ,IAAI,CAAC,SAAS,GAAG;QACjB,IAAI,CAAC,SAAS,GAAG,EAAE;QACnB,IAAI,CAAC,SAAS,GAAG;QACjB,IAAI,CAAC,MAAM,GAAG;QACd,IAAI,CAAC,aAAa,GAAG;QACrB,IAAI,CAAC,cAAc,GAAG,IAAI,eAAe,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI;IACtE;IAEA,eAAe;QACb,IAAI,IAAI,CAAC,aAAa,EACpB,OAAO,oBAAoB,CAAC,IAAI,CAAC,aAAa;QAGhD,IAAI,CAAC,aAAa,GAAG,OAAO,qBAAqB,CAAC;YAChD,IAAI,CAAC,cAAc;QACrB;IACF;IAEA,iBAAiB;QACf,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,UAAU,GAAG;QAClC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;YACtB,MAAM,UAAU,KAAK,IAAI,CACvB,AAAC,CAAA,KAAK,YAAY,GAAG,IAAI,CAAC,MAAM,AAAD,IAAM,CAAA,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,MAAM,AAAD;YAGlE,KAAK,KAAK,CAAC,UAAU,GAAG,CAAC,KAAK,EAAG,QAAS,CAAC;QAC7C;IACF;IAEA,OAAO,KAAK,UAAU,CAAC,CAAC,EAAE;QACxB,MAAM,aAAE,YAAY,YAAY,GAAG;QACnC,MAAM,UAAU,IAAI;QAEpB,QAAQ,SAAS,GACf,qBAAqB,cACjB,YACA,SAAS,aAAa,CAAC;QAE7B,IAAI,CAAC,QAAQ,SAAS,EAAE;QAExB,QAAQ,SAAS,GAAG,MAAM,IAAI,CAAC,QAAQ,SAAS,CAAC,QAAQ;QACzD,QAAQ,SAAS,CAAC,KAAK,CAAC,OAAO,GAAG;QAClC,QAAQ,MAAM,GAAG,SAAS,iBAAiB,QAAQ,SAAS,EAAE,MAAM,EAAE;QACtE,QAAQ,cAAc,CAAC,OAAO,CAAC,QAAQ,SAAS;QAChD,QAAQ,cAAc;QAEtB,OAAO;IACT;IAEA,UAAU;QACR,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS;QAC5C,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,OAAO,GAAG;QAC/B,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,UAAU,GAAG;QAClC,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;YACtB,KAAK,KAAK,CAAC,UAAU,GAAG;QAC1B;IACF;AACF;IAEA,2CAAe","sources":["src/index.js"],"sourcesContent":["class MasonrySimple {\n  constructor() {\n    this.container = null;\n    this.gridItems = [];\n    this.rowHeight = 1;\n    this.rowGap = 0;\n    this.resizeTimeout = null;\n    this.resizeObserver = new ResizeObserver(this.handleResize.bind(this));\n  }\n\n  handleResize() {\n    if (this.resizeTimeout) {\n      window.cancelAnimationFrame(this.resizeTimeout);\n    }\n\n    this.resizeTimeout = window.requestAnimationFrame(() => {\n      this.resizeAllItems();\n    });\n  }\n\n  resizeAllItems() {\n    this.container.style.alignItems = 'start';\n    this.gridItems.forEach((item) => {\n      const rowSpan = Math.ceil(\n        (item.clientHeight + this.rowGap) / (this.rowHeight + this.rowGap)\n      );\n\n      item.style.gridRowEnd = `span ${ rowSpan }`;\n    });\n  }\n\n  static init(options = {}) {\n    const { container = '.masonry' } = options;\n    const masonry = new MasonrySimple();\n\n    masonry.container =\n      container instanceof HTMLElement\n        ? container\n        : document.querySelector(container);\n\n    if (!masonry.container) return;\n\n    masonry.gridItems = Array.from(masonry.container.children);\n    masonry.container.style.contain = 'layout';\n    masonry.rowGap = parseInt(getComputedStyle(masonry.container).rowGap, 10);\n    masonry.resizeObserver.observe(masonry.container);\n    masonry.resizeAllItems();\n\n    return masonry;\n  }\n\n  destroy() {\n    this.resizeObserver.unobserve(this.container);\n    this.container.style.contain = '';\n    this.container.style.alignItems = '';\n    this.gridItems.forEach((item) => {\n      item.style.gridRowEnd = '';\n    });\n  }\n}\n\nexport default MasonrySimple;\n"],"names":[],"version":3,"file":"index.js.map"}